import uuid
import os
import requests

from aiogram import Router, types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from utils import constants, config

router = Router()

@router.inline_query()
async def handle_inline_query(inline_query: types.InlineQuery):
    query = inline_query.query.strip().lower()
    results: list[InlineQueryResultArticle] = []

    if query.startswith("hw "):
        lang = query[3:].strip()
        code = constants.HELLO_WORLD_CODES.get(lang)

        if code:
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title=f"Hello World –Ω–∞ {lang}",
                    description=f"–ü—Ä–∏–º–µ—Ä Hello World –Ω–∞ {lang}",
                    input_message_content=InputTextMessageContent(
                        message_text=f"*üíª Hello World –Ω–∞ {lang}:*\n\n```{lang}\n{code}\n```",
                        parse_mode="Markdown"
                    )
                )
            )
        else:
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description="–î–æ—Å—Ç—É–ø–Ω—ã–µ: python, c++, java, javascript, rust",
                    input_message_content=InputTextMessageContent(
                        message_text="‚ùå –Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–º–µ—Ä: `hw python`",
                        parse_mode="Markdown"
                    )
                )
            )

    elif query == "hw":
        results.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫",
                description="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤",
                input_message_content=InputTextMessageContent(
                    message_text=constants.LANG_LIST_MD,
                    parse_mode="Markdown"
                )
            )
        )

    elif query == "bio" and inline_query.from_user.id == config["owner_id"]:
        results.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="–ú–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è",
                description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ",
                input_message_content=InputTextMessageContent(
                    message_text=constants.BIO_TEXT,
                    parse_mode="Markdown"
                )
            )
        )

    elif query == "gif":
        results.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                description="–ü—Ä–∏–º–µ—Ä: gif –∫–æ—Ç",
                input_message_content=InputTextMessageContent(
                    message_text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `gif`.",
                    parse_mode="Markdown"
                )
            )
        )

    elif query.startswith("gif "):
        search_term = query[4:].strip()

        api_key = os.getenv("TENOR_API_KEY")
        limit = 5

        response = requests.get(
            "https://tenor.googleapis.com/v2/search",
            params={
                "q": search_term,
                "key": api_key,
                "limit": limit,
                "media_filter": "minimal",
                "contentfilter": "medium"
            }
        )

        if response.status_code == 200:
            data = response.json()

            for result in data.get("results", []):
                gif_url = result["media_formats"]["gif"]["url"]

                results.append(
                    InlineQueryResultArticle(
                        id=str(uuid.uuid4()),
                        title=search_term,
                        description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GIF",
                        input_message_content=InputTextMessageContent(
                            message_text=gif_url
                        ),
                        thumb_url=gif_url
                    )
                )
        else:
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ GIF",
                    description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                    input_message_content=InputTextMessageContent(
                        message_text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GIF. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        parse_mode="Markdown"
                    )
                )
            )

    elif query == "":
        results.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="hw <—è–∑—ã–∫>",
                description="–ü–æ–∫–∞–∑–∞—Ç—å Hello World –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —è–∑—ã–∫–æ–≤",
                input_message_content=InputTextMessageContent(
                    message_text=constants.LANG_LIST_MD,
                    parse_mode="Markdown"
                )
            )
        )

        results.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="gif <–∑–∞–ø—Ä–æ—Å>",
                description="–ù–∞–π—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É",
                input_message_content=InputTextMessageContent(
                    message_text="–í–≤–µ–¥–∏—Ç–µ `gif <—á—Ç–æ –∏—Å–∫–∞—Ç—å>` –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–∏—Ñ–æ–∫!",
                    parse_mode="Markdown"
                )
            )
        )

        if inline_query.from_user.id == config["owner_id"]:
            results.append(
                InlineQueryResultArticle(
                    id=str(uuid.uuid4()),
                    title="bio",
                    description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –±–æ—Ç–∞",
                    input_message_content=InputTextMessageContent(
                        message_text=constants.BIO_TEXT,
                        parse_mode="Markdown"
                    )
                )
            )

    await inline_query.answer(results, cache_time=0, is_personal=True)
